/**
 * @file Contains constants mirrored from the Go source code (`types/txtypes/constants.go`).
 *
 * @important
 * DO NOT EDIT THIS FILE MANUALLY.
 *
 * It is generated based on the Go source code. Any manual changes will be overwritten.
 * To update these constants, modify the Go source and then regenerate this file.
 */

/**
 * This file contains constants mirrored from the Go source code (types/txtypes/constants.go).
 * These values are essential for building and validating transactions before signing.
 * BigInts are used for 64-bit integers to avoid precision loss.
 */

// #region Transaction & Order Type Enums

/**
 * Defines the transaction type identifier.
 */
export enum TxType {
  L2ChangePubKey = 8,
  L2CreateSubAccount = 9,
  L2CreatePublicPool = 10,
  L2UpdatePublicPool = 11,
  L2Transfer = 12,
  L2Withdraw = 13,
  L2CreateOrder = 14,
  L2CancelOrder = 15,
  L2CancelAllOrders = 16,
  L2ModifyOrder = 17,
  L2MintShares = 18,
  L2BurnShares = 19,
  L2UpdateLeverage = 20,
  L2UpdateMargin = 29,
  InternalClaimOrder = 21,
  InternalCancelOrder = 22,
  InternalDeleverage = 23,
  InternalExitPosition = 24,
  InternalCancelAllOrders = 25,
  InternalLiquidatePosition = 26,
  InternalCreateOrder = 27,
  L2CreateGroupedOrders = 28
}

/**
 * Defines the type of an order.
 */
export enum OrderType {
  /** User set order types */
  LimitOrder = 0,
  MarketOrder = 1,
  StopLossOrder = 2,
  StopLossLimitOrder = 3,
  TakeProfitOrder = 4,
  TakeProfitLimitOrder = 5,
  TWAPOrder = 6,
  /** Internal order types */
  TWAPSubOrder = 7,
  LiquidationOrder = 8
}

/**
 * The maximum user-settable order type.
 */
export const API_MAX_ORDER_TYPE = OrderType.TWAPOrder

/**
 * Defines the time-in-force policy for an order.
 */
export enum TimeInForce {
  ImmediateOrCancel = 0,
  GoodTillTime = 1,
  PostOnly = 2
}

/**
 * Defines the grouping type for grouped orders.
 */
export enum GroupingType {
  /** Default or unspecified grouping. */
  Default = 0,
  OneTriggersTheOther = 1,
  OneCancelsTheOther = 2,
  OneTriggersAOneCancelsTheOther = 3
}

/**
 * Defines the time-in-force policy for a cancel-all-orders operation.
 */
export enum CancelAllOrdersTimeInForce {
  ImmediateCancelAll = 0,
  ScheduledCancelAll = 1,
  AbortScheduledCancelAll = 2
}

/**
 * Defines the margin mode for leverage transactions.
 */
export enum MarginMode {
  Cross = 0,
  Isolated = 1
}

export enum ReduceOnly {
  False = 0,
  True = 1
}

export const NilOrderTriggerPrice = 0

// #endregion

// #region Numeric Constants

export const HASH_LENGTH = 32
export const ONE_USDC = 1_000_000
export const FEE_TICK = 1_000_000n
export const MARGIN_FRACTION_TICK = 10_000n
export const SHARE_TICK = 10_000n

// #endregion

// #region Boundary and Limit Constants

// --- Account and Key Limits ---
export const MIN_ACCOUNT_INDEX = 0n
export const MAX_ACCOUNT_INDEX = 281474976710654n // (1n << 48n) - 2n
export const MIN_API_KEY_INDEX = 0
export const MAX_API_KEY_INDEX = 254
export const NIL_API_KEY_INDEX = MAX_API_KEY_INDEX + 1
export const MAX_MASTER_ACCOUNT_INDEX = 140737488355327n // (1n << 47n) - 1n

// --- Market Limits ---
export const MIN_MARKET_INDEX = 0
export const MAX_MARKET_INDEX = 254

// --- Public Pool Limits ---
export const MAX_INVESTED_PUBLIC_POOL_COUNT = 16n
export const INITIAL_POOL_SHARE_VALUE = 1_000n
export const MIN_INITIAL_TOTAL_SHARES = 1_000_000_000n // 1_000 USDC worth of shares
export const MAX_INITIAL_TOTAL_SHARES = 1_000_000_000_000n // 1,000,000,000 USDC worth of shares
export const MAX_POOL_SHARES = (1n << 60n) - 1n
export const MAX_BURNT_SHARE_USDC_VALUE = (1n << 60n) - 1n
export const MAX_POOL_ENTRY_USDC = (1n << 56n) - 1n
export const MIN_POOL_SHARES_TO_MINT_OR_BURN = 1n
export const MAX_POOL_SHARES_TO_MINT_OR_BURN = (1n << 60n) - 1n

// --- Nonce and Index Limits ---
export const MIN_NONCE = 0n
export const MIN_ORDER_NONCE = 0n
export const MAX_ORDER_NONCE = (1n << 48n) - 1n
export const NIL_CLIENT_ORDER_INDEX = 0n
export const NIL_ORDER_INDEX = 0n
export const MIN_CLIENT_ORDER_INDEX = 1n
export const MAX_CLIENT_ORDER_INDEX = (1n << 48n) - 1n
export const MIN_ORDER_INDEX = MAX_CLIENT_ORDER_INDEX + 1n
export const MAX_ORDER_INDEX = (1n << 56n) - 1n

// --- Order Parameter Limits ---
export const MIN_ORDER_BASE_AMOUNT = 1n
export const MAX_ORDER_BASE_AMOUNT = (1n << 48n) - 1n
export const NIL_ORDER_BASE_AMOUNT = 0n
export const NIL_ORDER_PRICE = 0
export const MIN_ORDER_PRICE = 1
export const MAX_ORDER_PRICE = 2 ** 32 - 1
export const NIL_ORDER_TRIGGER_PRICE = 0
export const MIN_ORDER_TRIGGER_PRICE = 1
export const MAX_ORDER_TRIGGER_PRICE = 2 ** 32 - 1

// --- Time and Expiry Limits ---
export const MIN_ORDER_CANCEL_ALL_PERIOD = 1000 * 60 * 5 // 5 minutes
export const MAX_ORDER_CANCEL_ALL_PERIOD = 1000 * 60 * 60 * 24 * 15 // 15 days
export const NIL_ORDER_EXPIRY = 0n
export const MIN_ORDER_EXPIRY = 1n
export const MAX_ORDER_EXPIRY = (1n << 63n) - 1n // math.MaxInt64
export const MIN_ORDER_EXPIRY_PERIOD = 1000 * 60 * 5 // 5 minutes
export const MAX_ORDER_EXPIRY_PERIOD = 1000 * 60 * 60 * 24 * 30 // 30 days
export const MAX_TIMESTAMP = (1n << 48n) - 1n

// --- Other Limits ---
export const MAX_GROUPED_ORDER_COUNT = 3
export const MAX_EXCHANGE_USDC = (1n << 60n) - 1n
export const MIN_TRANSFER_AMOUNT = 1n
export const MAX_TRANSFER_AMOUNT = MAX_EXCHANGE_USDC
export const MIN_WITHDRAWAL_AMOUNT = 1n
export const MAX_WITHDRAWAL_AMOUNT = MAX_EXCHANGE_USDC

// #endregion
