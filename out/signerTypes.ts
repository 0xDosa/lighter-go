/**
 * @file Contains TypeScript type definitions that correspond to the Go transaction response structs.
 *
 * @important
 * DO NOT EDIT THIS FILE MANUALLY.
 *
 * It is generated based on the Go source code in the `types/txtypes/` directory.
 * Any manual changes will be overwritten. To update the types, you must
 * modify the corresponding Go structs and then regenerate this file.
 */

/**
 * Defines the structure of the response for a `signChangePubKey` transaction.
 * Based on the `L2ChangePubKeyTxInfo` struct in Go.
 */
export interface ChangePubKeyTx {
  /**
   * The account index for this transaction.
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The new public key, encoded as a Base64 string.
   * @see Go type: []byte
   */
  PubKey: string

  /**
   * The L1 signature, as a string.
   * @see Go type: string
   */
  L1Sig: string

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string

  /**
   * The human-readable message that was signed to generate the L1Sig.
   * This is manually added in the Go WASM wrapper.
   * @see Go type: string
   */
  MessageToSign: string
}

/**
 * Defines the core fields for an order, shared across different order transactions.
 * Based on the OrderInfo struct in Go.
 */
export interface OrderInfo {
  /**
   * The index of the market for this order.
   * @see Go type: uint8
   */
  MarketIndex: number

  /**
   * The client-provided unique identifier for this order.
   * @see Go type: int64
   */
  ClientOrderIndex: number

  /**
   * The base amount for the order.
   * @see Go type: int64
   */
  BaseAmount: number

  /**
   * The price for the order.
   * @see Go type: uint32
   */
  Price: number

  /**
   * Indicates if the order is an ask (sell) or bid (buy). 1 for ask, 0 for bid.
   * @see Go type: uint8
   */
  IsAsk: number

  /**
   * The type of the order (e.g., Market, Limit).
   * @see Go type: uint8
   */
  Type: number

  /**
   * The time-in-force policy for the order (e.g., GoodTillTime, ImmediateOrCancel).
   * @see Go type: uint8
   */
  TimeInForce: number

  /**
   * Indicates if the order is reduce-only.
   * @see Go type: uint8
   */
  ReduceOnly: number

  /**
   * The trigger price for conditional orders.
   * @see Go type: uint32
   */
  TriggerPrice: number

  /**
   * The Unix millisecond timestamp for when the order expires.
   * @see Go type: int64
   */
  OrderExpiry: number
}

/**
 * Defines the structure of the response for a `signCreateOrder` transaction.
 * It extends the base OrderInfo with transaction-specific details.
 */
export interface CreateOrderTx extends OrderInfo {
  /**
   * The account index for this transaction.
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signCreateGroupedOrders` transaction.
 * Based on the L2CreateGroupedOrdersTxInfo struct in Go.
 */
export interface CreateGroupedOrdersTx {
  /**
   * The account index for this transaction.
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The grouping type for the orders (OCO, OTO, OTOCO).
   * @see Go type: uint8
   */
  GroupingType: number

  /**
   * Array of orders in this grouped transaction.
   * @see Go type: []*OrderInfo
   */
  Orders: OrderInfo[]

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signCancelOrder` transaction.
 * Based on the L2CancelOrderTxInfo struct in Go.
 */
export interface CancelOrderTx {
  /**
   * The account index for this transaction.
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The index of the market for the order being cancelled.
   * @see Go type: uint8
   */
  MarketIndex: number

  /**
   * The unique index of the order to be cancelled.
   * @remarks From Go source: "Client Order Index or Order Index of the order to cancel"
   * @see Go type: int64
   */
  Index: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signWithdraw` transaction.
 * Based on the L2WithdrawTxInfo struct in Go.
 */
export interface WithdrawTx {
  /**
   * The account index from which funds are being withdrawn.
   * @see Go type: int64
   */
  FromAccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The amount of USDC to withdraw.
   * @remarks From Go source: "USDCAmount is given with 6 decimals"
   * @see Go type: uint64
   */
  USDCAmount: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signCreateSubAccount` transaction.
 * Based on the L2CreateSubAccountTxInfo struct in Go.
 */
export interface CreateSubAccountTx {
  /**
   * The account index for this transaction.
   * @remarks From Go source: "Master account index"
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signCancelAllOrders` transaction.
 * Based on the L2CancelAllOrdersTxInfo struct in Go.
 */
export interface CancelAllOrdersTx {
  /**
   * The account index for this transaction.
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The time-in-force policy for the cancellation.
   * @see Go type: uint8
   */
  TimeInForce: number

  /**
   * The time parameter associated with the cancellation policy.
   * Its meaning depends on the TimeInForce value.
   * @see Go type: int64
   */
  Time: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signModifyOrder` transaction.
 * Based on the L2ModifyOrderTxInfo struct in Go.
 */
export interface ModifyOrderTx {
  /**
   * The account index for this transaction.
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The index of the market for the order being modified.
   * @see Go type: uint8
   */
  MarketIndex: number

  /**
   * The unique index of the order to be modified.
   * @remarks From Go source: "Client Order Index or Order Index of the order to modify"
   * @see Go type: int64
   */
  Index: number

  /**
   * The new base amount for the order.
   * @see Go type: int64
   */
  BaseAmount: number

  /**
   * The new price for the order.
   * @see Go type: uint32
   */
  Price: number

  /**
   * The new trigger price for the order.
   * @see Go type: uint32
   */
  TriggerPrice: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signTransfer` transaction.
 * Based on the L2TransferTxInfo struct in Go.
 */
export interface TransferTx {
  /**
   * The account index initiating the transfer.
   * @see Go type: int64
   */
  FromAccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The account index receiving the transfer.
   * @see Go type: int64
   */
  ToAccountIndex: number

  /**
   * The amount of USDC to transfer, with 6 decimals.
   * @remarks From Go source: "USDCAmount is given with 6 decimals"
   * @see Go type: int64
   */
  USDCAmount: number

  /**
   * The transfer fee amount.
   * @see Go type: int64
   */
  Fee: number

  /**
   * The 32-byte memo for the transfer, as an array of bytes.
   * @see Go type: [32]byte
   */
  Memo: number[]

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string

  /**
   * The human-readable message that was signed to generate the L1 signature.
   * This is manually added in the Go WASM wrapper.
   * @see Go type: string
   */
  MessageToSign: string
}

/**
 * Defines the structure of the response for a `signUpdateLeverage` transaction.
 * Based on the L2UpdateLeverageTxInfo struct in Go.
 */
export interface UpdateLeverageTx {
  /**
   * The account index for this transaction.
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The index of the market for which the leverage is being updated.
   * @see Go type: uint8
   */
  MarketIndex: number

  /**
   * The new initial margin fraction for the market.
   * @see Go type: uint16
   */
  InitialMarginFraction: number

  /**
   * The margin mode for the leverage update (0 = Cross, 1 = Isolated).
   * @see Go type: uint8
   */
  MarginMode: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signCreatePublicPool` transaction.
 * Based on the L2CreatePublicPoolTxInfo struct in Go.
 */
export interface CreatePublicPoolTx {
  /**
   * The master account index for this transaction.
   * @remarks From Go source: "Master account index"
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The operator fee for the public pool.
   * @see Go type: int64
   */
  OperatorFee: number

  /**
   * The initial total shares for the public pool.
   * @see Go type: int64
   */
  InitialTotalShares: number

  /**
   * The minimum operator share rate for the public pool.
   * @see Go type: int64
   */
  MinOperatorShareRate: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signUpdatePublicPool` transaction.
 * Based on the L2UpdatePublicPoolTxInfo struct in Go.
 */
export interface UpdatePublicPoolTx {
  /**
   * The master account index for this transaction.
   * @remarks From Go source: "Master account index"
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The index of the public pool to update.
   * @see Go type: int64
   */
  PublicPoolIndex: number

  /**
   * The new status for the public pool.
   * @see Go type: uint8
   */
  Status: number

  /**
   * The new operator fee for the public pool.
   * @see Go type: int64
   */
  OperatorFee: number

  /**
   * The new minimum operator share rate for the public pool.
   * @see Go type: int64
   */
  MinOperatorShareRate: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signMintShares` transaction.
 * Based on the L2MintSharesTxInfo struct in Go.
 */
export interface MintSharesTx {
  /**
   * The account index for this transaction.
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The index of the public pool to mint shares from.
   * @see Go type: int64
   */
  PublicPoolIndex: number

  /**
   * The amount of shares to mint.
   * @see Go type: int64
   */
  ShareAmount: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

/**
 * Defines the structure of the response for a `signBurnShares` transaction.
 * Based on the L2BurnSharesTxInfo struct in Go.
 */
export interface BurnSharesTx {
  /**
   * The account index for this transaction.
   * @see Go type: int64
   */
  AccountIndex: number

  /**
   * The API key index used for this transaction.
   * @see Go type: uint8
   */
  ApiKeyIndex: number

  /**
   * The index of the public pool to burn shares from.
   * @see Go type: int64
   */
  PublicPoolIndex: number

  /**
   * The amount of shares to burn.
   * @see Go type: int64
   */
  ShareAmount: number

  /**
   * The Unix millisecond timestamp when this transaction expires.
   * @see Go type: int64
   */
  ExpiredAt: number

  /**
   * The sequential nonce for this transaction.
   * @see Go type: int64
   */
  Nonce: number

  /**
   * The signature for this transaction, encoded as a Base64 string.
   * @see Go type: []byte
   */
  Sig: string
}

export interface UpdateMarginTx {
  AccountIndex: number
  ApiKeyIndex: number
  MarketIndex: number
  USDCAmount: string
  Direction: number
  ExpiredAt: number
  Nonce: number
  Sig: number[]
}
